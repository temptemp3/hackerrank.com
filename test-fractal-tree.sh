#!/bin/bash
## test-fractal-tree
## - generates fractal tree
## version 0.0.0 - initial
##################################################
fractal-tree-height() { 
  echo 16
}
fractal-tree-grid-row() { 
  cat << EOF
____________________________________________________________________________________________________
EOF
}
fractal-tree-grid() { 
  local i
  for i in {1..63} 
  do
    fractal-tree-grid-row
  done
}
fractal-tree() { { local col ; col="${1-50}" ; local row ; row="${2-63}" ; local length ; length="${3-16}" ; local iteration ; iteration="${4-1}" ; }
  test ! ${length} -lt 1 || { true ; return ; }
  test ! ${iteration} -gt ${n} || { true ; return ; }

  [ ! ] || {
    echo -n "${col} "
    echo -n "${row} "
    echo ${length}
  } 1>&2

  i=${length}
  while [ ${i} -gt 0 ]
  do
    i=$(( i - 1 ))
    set-cell $(( row - i )) ${col}
  done

  row=$(( row - length ))
  i=${length}
  while [ ${i} -gt 0 ]
  do
    set-cell $(( row - i + 1 )) $(( col - i ))
    set-cell $(( row - i + 1 )) $(( col + i ))
    i=$(( i - 1 ))
  done
  ${FUNCNAME} $(( col - length )) $(( row - length )) $(( length / 2 )) $(( iteration + 1 ))
  ${FUNCNAME} $(( col + length )) $(( row - length )) $(( length / 2 )) $(( iteration + 1 ))
}
sed-replace-column() { { local line ; line="${1}" ; local column ; column="${2}" ; local char ; char="${3:0:1}" ; }
  echo -n "${line}s/^\\("
  while [ ${column} -gt 1 ]
  do
   echo -n . 
   column=$(( column - 1 ))
  done
  echo -n '\)./\1'
  echo "${char}/"
}
set-cell() { { local line ; line="${1}" ; local column ; column="${2}" ; }
  sed-replace-column ${line} ${column} 1
}
test-fractal-tree() {
  read -r n
  fractal-tree-grid | sed "$( fractal-tree ${@} )"
}
##################################################
if [ ! ] 
then
 true
else
 exit 1 # wrong args
fi
##################################################
test-fractal-tree ${@}
##################################################
## generated by create-stub2.sh v0.1.1
## on Mon, 28 Jan 2019 13:47:33 +0900
## see <https://github.com/temptemp3/sh2>
##################################################
